
@model List<Volunteer_website.ViewModels.EventModel>
@{
    ViewData["Title"] = "Events";
    var role = Context.Session.GetInt32("UserRole");
    Layout = (role == 0) ? "~/Views/Shared/User_Layout.cshtml" : "~/Views/Shared/_Layout.cshtml";
}
<head>
    <link rel="stylesheet" href="~/css/Cause.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />

</head>

<div class="hero-wrap" style="background-image: url('@Url.Content("~/images/bg_1.jpg")');" data-stellar-background-ratio="0.5">
    <div class="overlay"></div>
    <div class="container">
        <div class="row no-gutters slider-text align-items-center justify-content-center" data-scrollax-parent="true">
            <div class="col-md-7 ftco-animate text-center" data-scrollax=" properties: { translateY: '70%' }">
                <p class="breadcrumbs" data-scrollax="properties: { translateY: '30%', opacity: 1.6 }">
                    <span class="mr-2"><a href="@Url.Action("Index", "Home")">Home </a></span>
                    <span>Event</span>
                </p>
                <h1 class="mb-3 bread" data-scrollax="properties: { translateY: '30%', opacity: 1.6 }">EVENT</h1>
            </div>
        </div>
    </div>
</div>

<pre>

</pre>
@* <div class="event-filter-container container"> *@
@*     <!-- Hàng 1: Các tab lọc trạng thái --> *@
@*     <div class="event-filter-tabs d-flex gap-2 mb-3"> *@
@*         <button class="tab-btn active" data-filter="ongoing">Đang diễn ra</button> *@
@*         <button class="tab-btn" data-filter="upcoming">Sắp diễn ra</button> *@
@*         <button class="tab-btn" data-filter="ended">Đã kết thúc</button> *@
@*     </div> *@

@*     <!-- Hàng 2: Thanh tìm kiếm, căn trái đúng lề --> *@
@*     <div class="search-box mb-3"> *@
@*         <input type="text" id="eventSearch" placeholder="Bạn muốn tìm gì?"> *@
@*         <i class="fa fa-search search-icon"></i> *@
@*     </div> *@
@* </div> *@




<section class="ftco-section pt-3">
    <div class="container">
        <div class="row">
            @{
                var today = DateOnly.FromDateTime(DateTime.Today);
            }
            <div class="event-filter-container container">
                <!-- Status Tabs Row -->
                <div class="event-filter-tabs d-flex gap-2 mb-3">
                    <button class="tab-btn active" data-filter="ongoing">Đang diễn ra</button>
                    <button class="tab-btn" data-filter="upcoming">Sắp diễn ra</button>
                    <button class="tab-btn" data-filter="ended">Đã kết thúc</button>
                </div>

                <!-- Tất cả các thanh lọc trên cùng một hàng -->
                <div class="row mb-3 align-items-center">
                    <!-- Loại sự kiện -->
                    <div class="col-md-3">
                        <div class="filter-box">
                            <select id="eventTypeFilter">
                                <option value="">Tất cả loại sự kiện</option>
                                @foreach (var type in Model.Select(e => e.type).Distinct())
                                {
                                    <option value="@type">@type</option>
                                }
                            </select>
                            <i class="fa fa-chevron-down search-icon"></i>
                        </div>
                    </div>

                    <!-- Khoảng thời gian -->
                    <div class="col-md-6">
                        <div class="date-range-box">
                            <input type="date" id="startDateFrom" placeholder="Từ ngày">
                            <span>đến</span>
                            <input type="date" id="startDateTo" placeholder="Đến ngày">
                        </div>
                    </div>

                    <!-- Nút lọc và đặt lại -->
                    <div class="col-md-3 text-right">
                        <button id="applyFilter" class="btn btn-filter">Lọc</button>
                        <button id="resetFilter" class="btn btn-reset">Đặt lại</button>
                    </div>
                </div>

                <!-- Hàng tìm kiếm theo tên sự kiện và ban tổ chức -->
                <div class="row mb-3">
                    <!-- Tìm kiếm sự kiện -->
                    <div class="col-md-6">
                        <div class="filter-box">
                            <input type="text" id="eventNameSearch" placeholder="Tìm kiếm sự kiện...">
                            <i class="fa fa-search search-icon"></i>
                        </div>
                    </div>

                    <!-- Tìm kiếm ban tổ chức -->
                    <div class="col-md-6">
                        <div class="filter-box">
                            <input type="text" id="organizationSearch" placeholder="Tìm ban tổ chức...">
                            <i class="fa fa-search search-icon"></i>
                        </div>
                    </div>
                </div>
            </div>
            @foreach (var ev in Model)
            {
                var daysLeft = (ev.DateEnd.DayNumber - today.DayNumber);
                var percentFund = ev.targetfund > 0 ? (int)((double)ev.currentfund / ev.targetfund * 100) : 0;

                // Xác định trạng thái sự kiện
                var eventStatus = "";
                if (today >= ev.DateBegin && today <= ev.DateEnd)
                {
                    eventStatus = "ongoing";
                }
                else if (today < ev.DateBegin)
                {
                    eventStatus = "upcoming";
                }
                else
                {
                    eventStatus = "ended";
                }

                <div class="col-md-4 ftco-animate mb-4 event-card"
                     data-status="@eventStatus"
                     data-date-begin="@ev.DateBegin.ToString("yyyy-MM-dd")"
                     data-date-end="@ev.DateEnd.ToString("yyyy-MM-dd")"
                     data-event-type="@ev.type">
                    <div class="card">
                        <img src="@Url.Content(ev.ImagePath)" alt="@ev.Name" />
                        <div class="card-content">
                            <span class="card-title">@ev.Name</span>
                            <div class="org-info">
                                <span>@ev.Organization</span>
                                <span style="background: #ffcc99; padding: 5px 10px; border-radius: 5px;">
                                    @(daysLeft > 0 ? $"{daysLeft} Days Left" : "Closed")
                                </span>
                            </div>
                            <div class="progress-container">
                                <div class="progress-bar" style="width: @(percentFund)%"></div>
                            </div>
                            <span class="fund-raised">
                                @ev.currentfund.ToString("N0") / @ev.targetfund.ToString("N0")
                            </span>
                            <span class="donation-group">
                                <span class="donation-count">
                                    <div>Members</div>
                                    <span class="count">
                                        @ev.currentmember.ToString("N0") / @ev.targetmember.ToString("N0")
                                    </span>
                                </span>
                                <a href="@Url.Action("Detail_Event", "Home", new { id = ev.Event_Id })" class="donate-btn">View</a>
                            </span>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Phân trang -->

        <div class="row mt-5">
            <div class="col text-center">
                <div class="block-27">
                    <ul>
                        <li><a href="#">&#60;</a></li>
                        <li class="active"><span>1</span></li>
                        <li><a href="#">2</a></li>
                        <li><a href="#">3</a></li>
                        <li><a href="#">4</a></li>
                        <li><a href="#">5</a></li>
                        <li><a href="#">&#62;</a></li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</section>
<script>
       document.addEventListener('DOMContentLoaded', function () {
        const tabButtons = document.querySelectorAll('.tab-btn');
        const eventCards = document.querySelectorAll('.event-card');
        const searchInputs = {
            eventName: document.getElementById('eventNameSearch'),
            organization: document.getElementById('organizationSearch'),
            startDateFrom: document.getElementById('startDateFrom'),
            startDateTo: document.getElementById('startDateTo'),
            eventType: document.getElementById('eventTypeFilter')
        };
        const applyFilterBtn = document.getElementById('applyFilter');
        const resetFilterBtn = document.getElementById('resetFilter');
        let currentFilter = "ongoing";

            function applyAllFilters() {
        const query = {
            eventName: searchInputs.eventName.value.toLowerCase(),
            organization: searchInputs.organization.value.toLowerCase(),
            startDateFrom: searchInputs.startDateFrom.value ? new Date(searchInputs.startDateFrom.value) : null,
            startDateTo: searchInputs.startDateTo.value ? new Date(searchInputs.startDateTo.value) : null,
            eventType: searchInputs.eventType.value
        };

        eventCards.forEach(card => {
            const status = card.getAttribute('data-status');
            const title = card.querySelector('.card-title').textContent.toLowerCase();
            const org = card.querySelector('.org-info span:first-child').textContent.toLowerCase();
            const dateBegin = new Date(card.getAttribute('data-date-begin'));

            // Cần thêm thuộc tính data-date-end vào thẻ event-card
            const dateEndAttr = card.getAttribute('data-date-end');
            const dateEnd = dateEndAttr ? new Date(dateEndAttr) : null;

            const eventType = card.getAttribute('data-event-type');

            // Status filter
            const matchesStatus = (status === currentFilter);

            // Text filters
            const matchesName = title.includes(query.eventName);
            const matchesOrg = org.includes(query.organization);

            // Date range filter - đơn giản hóa
            let matchesDate = true;
            if (query.startDateFrom && query.startDateTo) {
                // Sự kiện thỏa mãn nếu HOẶC ngày bắt đầu HOẶC ngày kết thúc nằm trong khoảng
                matchesDate = (
                    // Ngày bắt đầu nằm trong khoảng
                    (dateBegin >= query.startDateFrom && dateBegin <= query.startDateTo) ||

                    // Ngày kết thúc nằm trong khoảng
                    (dateEnd && dateEnd >= query.startDateFrom && dateEnd <= query.startDateTo)
                );
            } else if (query.startDateFrom) {
                // Chỉ có ngày bắt đầu lọc được chọn
                matchesDate = dateBegin >= query.startDateFrom || (dateEnd && dateEnd >= query.startDateFrom);
            } else if (query.startDateTo) {
                // Chỉ có ngày kết thúc lọc được chọn
                matchesDate = dateBegin <= query.startDateTo || (dateEnd && dateEnd <= query.startDateTo);
            }

            // Event type filter
            let matchesType = true;
            if (query.eventType) {
                matchesType = eventType === query.eventType;
            }

            // Combine all filters
            if (matchesStatus && matchesName && matchesOrg && matchesDate && matchesType) {
                card.style.display = 'block';
            } else {
                card.style.display = 'none';
            }
        });
    }

        // Tab buttons functionality
        tabButtons.forEach(button => {
            button.addEventListener('click', function () {
                tabButtons.forEach(btn => btn.classList.remove('active'));
                this.classList.add('active');
                currentFilter = this.getAttribute('data-filter');
                applyAllFilters();
            });
        });

        // Apply filter button
        if (applyFilterBtn) {
            applyFilterBtn.addEventListener('click', applyAllFilters);
        }

        // Reset filter button
        if (resetFilterBtn) {
            resetFilterBtn.addEventListener('click', function() {
                // Clear all inputs
                searchInputs.eventName.value = '';
                searchInputs.organization.value = '';
                searchInputs.startDateFrom.value = '';
                searchInputs.startDateTo.value = '';
                searchInputs.eventType.value = '';

                // Reset to default tab
                document.querySelector('.tab-btn[data-filter="ongoing"]').click();
            });
        }

        // Initialize with ongoing events
        document.querySelector('.tab-btn[data-filter="ongoing"]').click();
    });
</script>
<style>
    .search-box {
        position: relative;
        width: 20%; /* 1/5 chiều rộng container */
        min-width: 200px;
    }

        .search-box input {
            width: 100%;
            padding: 10px 38px 10px 16px;
            border: none;
            border-radius: 25px;
            background-color: white;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.15);
            font-size: 14px;
        }

    .search-icon {
        position: absolute;
        top: 50%;
        right: 12px;
        transform: translateY(-50%);
        color: #333;
        font-size: 16px;
        pointer-events: none;
    }

    .tab-btn {
        background: none;
        border: none;
        font-weight: 600;
        font-size: 16px;
        color: #666;
        padding: 8px 12px;
        border-bottom: 3px solid transparent;
        border-radius: 999px; /* Bo tròn hoàn toàn */
        cursor: pointer;
        transition: all 0.3s ease;
    }


        .tab-btn.active {
            color: orangered;
            border-color: #8000ff;
            background-color: #eee;
        }
        /* Style cho thanh tìm kiếm */
        .tab-btn:hover {
            background-color: #f0f0f0;
            color: #000;
        }

    .event-filter-tabs {
        display: flex;
        gap: 20px;
        margin: 0 auto 20px auto;
        border: 1px solid #ccc;
        border-radius: 999px; /* Bo tròn khung */
        padding: 10px 15px;
        max-width: 1140px;
        background-color: #f9f9f9;
        justify-content: center;
        box-shadow: 0 4px 8px rgba(0,0,0,0.05); /* thêm nhẹ shadow nếu thích */
    }
    /* Loc */
    .filter-box {
        position: relative;
        width: 100%;
    }

        .filter-box input,
        .filter-box select {
            width: 100%;
            padding: 10px 38px 10px 16px;
            border: 1px solid #ddd;
            border-radius: 25px;
            background-color: white;
            font-size: 14px;
            -webkit-appearance: none;
            -moz-appearance: none;
            appearance: none;
        }

    .date-range-box {
        display: flex;
        align-items: center;
        gap: 8px;
    }

        .date-range-box input {
            padding: 10px 16px;
            border: 1px solid #ddd;
            border-radius: 25px;
            background-color: white;
            font-size: 14px;
            flex: 1;
        }

        .date-range-box span {
            color: #666;
            font-size: 14px;
        }

    .btn-filter {
        background-color: orangered;
        color: white;
        border: none;
        padding: 8px 20px;
        border-radius: 25px;
        font-weight: 600;
        cursor: pointer;
        transition: background-color 0.3s;
        margin-right: 10px;
    }

    .btn-reset {
        background-color: #f0f0f0;
        color: #666;
        border: none;
        padding: 8px 20px;
        border-radius: 25px;
        font-weight: 600;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .btn-filter:hover {
        background-color: #6a00d6;
    }

    .btn-reset:hover {
        background-color: #e0e0e0;
    }

    .search-icon {
        position: absolute;
        top: 50%;
        right: 12px;
        transform: translateY(-50%);
        color: #333;
        font-size: 16px;
        pointer-events: none;
    }
</style>