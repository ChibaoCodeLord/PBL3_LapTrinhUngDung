@model List<Volunteer_website.ViewModels.EventModel>
@{
    ViewData["Title"] = "Events";
    var role = Context.Session.GetInt32("UserRole");
    Layout = (role == 0) ? "~/Views/Shared/User_Layout.cshtml" : "~/Views/Shared/_Layout.cshtml";
}
<head>
    <link rel="stylesheet" href="~/css/Cause.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
</head>

<div class="hero-wrap" style="background-image: url('@Url.Content("~/images/bg_1.jpg")');" data-stellar-background-ratio="0.5">
    <div class="overlay"></div>
    <div class="container">
        <div class="row no-gutters slider-text align-items-center justify-content-center" data-scrollax-parent="true">
            <div class="col-md-7 ftco-animate text-center" data-scrollax=" properties: { translateY: '70%' }">
                <p class="breadcrumbs" data-scrollax="properties: { translateY: '30%', opacity: 1.6 }">
                    <span class="mr-2"><a href="@Url.Action("Index", "Home")">Home </a></span>
                    <span>Event</span>
                </p>
                <h1 class="mb-3 bread" data-scrollax="properties: { translateY: '30%', opacity: 1.6 }">EVENT</h1>
            </div>
        </div>
    </div>
</div>

<section class="ftco-section pt-3">
    <div class="container">
        <div class="row">
            @{
                var today = DateOnly.FromDateTime(DateTime.Today);
            }
            <div class="event-filter-container container">
                <!-- Status Tabs Row -->
                <div class="event-filter-nav d-flex gap-2 mb-3">
                    <button class="event-tab-button active" data-filter="ongoing">Đang diễn ra</button>
                    <button class="event-tab-button" data-filter="upcoming">Sắp diễn ra</button>
                    <button class="event-tab-button" data-filter="ended">Đã kết thúc</button>
                </div>

                <!-- Tất cả các thanh lọc trên cùng một hàng -->
                <div class="row mb-3 align-items-center">
                    <!-- Loại sự kiện -->
                    <div class="col-md-3">
                        <div class="event-filter-input">
                            <select id="eventTypeFilter">
                                <option value="">Tất cả loại sự kiện</option>
                                @foreach (var type in Model.Select(e => e.type).Distinct())
                                {
                                    <option value="@type">@type</option>
                                }
                            </select>
                            <i class="fa fa-chevron-down event-search-icon"></i>
                        </div>
                    </div>

                    <!-- Khoảng thời gian -->
                    <div class="col-md-6">
                        <div class="event-date-range">
                            <input type="date" id="startDateFrom" placeholder="Từ ngày">
                            <span>đến</span>
                            <input type="date" id="startDateTo" placeholder="Đến ngày">
                        </div>
                    </div>

                    <!-- Nút lọc và đặt lại -->
                    <div class="col-md-3 text-right">
                        <button id="applyFilter" class="event-filter-apply">Lọc</button>
                        <button id="resetFilter" class="event-filter-reset">Đặt lại</button>
                    </div>
                </div>

                <!-- Hàng tìm kiếm theo tên sự kiện và ban tổ chức -->
                <div class="row mb-3">
                    <!-- Tìm kiếm sự kiện -->
                    <div class="col-md-6">
                        <div class="event-filter-input">
                            <input type="text" id="eventNameSearch" placeholder="Tìm kiếm sự kiện...">
                            <i class="fa fa-search event-search-icon"></i>
                        </div>
                    </div>

                    <!-- Tìm kiếm ban tổ chức -->
                    <div class="col-md-6">
                        <div class="event-filter-input">
                            <input type="text" id="organizationSearch" placeholder="Tìm ban tổ chức...">
                            <i class="fa fa-search event-search-icon"></i>
                        </div>
                    </div>
                </div>
            </div>

            @foreach (var ev in Model)
            {
                var daysLeft = (ev.DateEnd.DayNumber - today.DayNumber);
                var percentFund = ev.targetfund > 0 ? (int)((double)ev.currentfund / ev.targetfund * 100) : 0;

                // Xác định trạng thái sự kiện
                var eventStatus = "";
                if (today >= ev.DateBegin && today <= ev.DateEnd)
                {
                    eventStatus = "ongoing";
                }
                else if (today < ev.DateBegin)
                {
                    eventStatus = "upcoming";
                }
                else
                {
                    eventStatus = "ended";
                }

                <div class="col-md-4 ftco-animate mb-4 event-card"
                     data-status="@eventStatus"
                     data-date-begin="@ev.DateBegin.ToString("yyyy-MM-dd")"
                     data-date-end="@ev.DateEnd.ToString("yyyy-MM-dd")"
                     data-event-type="@ev.type">
                    <div class="card">
                        <img src="@Url.Content(string.IsNullOrEmpty(ev.ImagePath) ? "./images/DefaultImg/VolunteerImgDefault.jpg" : ev.ImagePath)" alt="@ev.Name" />
                        <div class="card-content">
                            <span class="card-title">@ev.Name</span>
                            <div class="org-info">
                                <span>@ev.Organization</span>
                                <span style="background: #ffcc99; padding: 5px 10px; border-radius: 5px;">
                                    @(daysLeft > 0 ? $"{daysLeft} Days Left" : "Closed")
                                </span>
                            </div>
                            <div class="progress-container">
                                <div class="progress-bar" style="width: @(percentFund)%"></div>
                            </div>
                            <span class="fund-raised">
                                @ev.currentfund.ToString("N0") / @ev.targetfund.ToString("N0")
                            </span>
                            <span class="donation-group">
                                <span class="donation-count">
                                    <div>Members</div>
                                    <span class="count">
                                        @ev.currentmember.ToString("N0") / @ev.targetmember.ToString("N0")
                                    </span>
                                </span>
                                <a href="@Url.Action("Detail_Event", "Home", new { id = ev.Event_Id })" class="donate-btn">View</a>
                            </span>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Phân trang -->
        <div class="row mt-5">
            <div class="col text-center">
                <div class="event-pagination">
                    <ul>
                        <!-- Trang trước -->
                        <li>
                            @if (ViewBag.CurrentPage > 1)
                            {
                                <a href="@Url.Action("Events", "Home", new { page = ViewBag.CurrentPage - 1, pageSize = ViewBag.PageSize, statusFilter = ViewBag.StatusFilter, eventName = ViewBag.EventName, organization = ViewBag.Organization, startDateFrom = ViewBag.StartDateFrom, startDateTo = ViewBag.StartDateTo, eventType = ViewBag.EventType })"></a>
                            }
                            else
                            {
                                <span></span>
                            }
                        </li>

                        <!-- Các số trang -->
                        @{
                            int startPage = Math.Max(1, ViewBag.CurrentPage - 2);
                            int endPage = Math.Min(ViewBag.TotalPages, ViewBag.CurrentPage + 2);

                            if (endPage - startPage < 4)
                            {
                                if (startPage == 1)
                                {
                                    endPage = Math.Min(ViewBag.TotalPages, startPage + 4);
                                }
                                else if (endPage == ViewBag.TotalPages)
                                {
                                    startPage = Math.Max(1, endPage - 4);
                                }
                            }

                            for (int i = startPage; i <= endPage; i++)
                            {
                                if (i == ViewBag.CurrentPage)
                                {
                                    <li class="active"><span>@i</span></li>
                                }
                                else
                                {
                                    <li><a href="@Url.Action("Events", "Home", new { page = i, pageSize = ViewBag.PageSize, statusFilter = ViewBag.StatusFilter, eventName = ViewBag.EventName, organization = ViewBag.Organization, startDateFrom = ViewBag.StartDateFrom, startDateTo = ViewBag.StartDateTo, eventType = ViewBag.EventType })">@i</a></li>
                                }
                            }
                        }

                        <!-- Trang sau -->
                        <li>
                            @if (ViewBag.CurrentPage < ViewBag.TotalPages)
                            {
                                <a href="@Url.Action("Events", "Home", new { page = ViewBag.CurrentPage + 1, pageSize = ViewBag.PageSize, statusFilter = ViewBag.StatusFilter, eventName = ViewBag.EventName, organization = ViewBag.Organization, startDateFrom = ViewBag.StartDateFrom, startDateTo = ViewBag.StartDateTo, eventType = ViewBag.EventType })">></a>
                            }
                            else
                            {
                                <span>></span>
                            }
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</section>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const tabButtons = document.querySelectorAll('.event-tab-button'); // Cập nhật selector
        const searchInputs = {
            eventName: document.getElementById('eventNameSearch'),
            organization: document.getElementById('organizationSearch'),
            startDateFrom: document.getElementById('startDateFrom'),
            startDateTo: document.getElementById('startDateTo'),
            eventType: document.getElementById('eventTypeFilter')
        };
        const applyFilterBtn = document.getElementById('applyFilter');
        const resetFilterBtn = document.getElementById('resetFilter');
        let currentFilter = '@ViewBag.StatusFilter' || "ongoing";

        function redirectWithFilters() {
            const query = {
                page: 1, // Reset về trang 1 khi áp dụng bộ lọc
                pageSize: @ViewBag.PageSize,
                statusFilter: currentFilter,
                eventName: searchInputs.eventName.value,
                organization: searchInputs.organization.value,
                startDateFrom: searchInputs.startDateFrom.value,
                startDateTo: searchInputs.startDateTo.value,
                eventType: searchInputs.eventType.value
            };

            // Tạo URL với các tham số query
            const url = '@Url.Action("Events", "Home")?' + new URLSearchParams(query).toString();
            window.location.href = url;
        }

        // Chức năng cho các tab
        tabButtons.forEach(button => {
            button.addEventListener('click', function () {
                tabButtons.forEach(btn => btn.classList.remove('active'));
                this.classList.add('active');
                currentFilter = this.getAttribute('data-filter');
                redirectWithFilters();
            });
        });

        // Nút áp dụng bộ lọc
        if (applyFilterBtn) {
            applyFilterBtn.addEventListener('click', redirectWithFilters);
        }

        // Nút đặt lại bộ lọc
        if (resetFilterBtn) {
            resetFilterBtn.addEventListener('click', function () {
                // Xóa tất cả đầu vào
                searchInputs.eventName.value = '';
                searchInputs.organization.value = '';
                searchInputs.startDateFrom.value = '';
                searchInputs.startDateTo.value = '';
                searchInputs.eventType.value = '';

                // Reset về tab mặc định
                currentFilter = "ongoing";
                document.querySelector('.event-tab-button[data-filter="ongoing"]').click(); // Cập nhật selector
            });
        }

        // Đặt tab đang hoạt động dựa trên statusFilter
        const activeTab = document.querySelector(`.event-tab-button[data-filter="${currentFilter}"]`); // Cập nhật selector
        if (activeTab) {
            tabButtons.forEach(btn => btn.classList.remove('active'));
            activeTab.classList.add('active');
        }
    });
</script>
<style>
    .event-search-container { /* Đổi tên từ event-search-box */
        position: relative;
        width: 20%;
        min-width: 200px;
    }

        .event-search-container input { /* Cập nhật selector */
            width: 100%;
            padding: 10px 38px 10px 16px;
            border: none;
            border-radius: 25px;
            background-color: white;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.15);
            font-size: 14px;
        }

    .event-search-icon { /* Đổi tên từ search-icon */
        position: absolute;
        top: 50%;
        right: 12px;
        transform: translateY(-50%);
        color: #333;
        font-size: 16px;
        pointer-events: none;
    }

    .event-tab-button { /* Đổi tên từ tab-btn */
        background: none;
        border: none;
        font-weight: 600;
        font-size: 16px;
        color: #666;
        padding: 8px 12px;
        border-bottom: 3px solid transparent;
        border-radius: 999px;
        cursor: pointer;
        transition: all 0.3s ease;
    }

        .event-tab-button.active { /* Cập nhật selector */
            color: orangered;
            border-color: #8000ff;
            background-color: #eee;
        }

        .event-tab-button:hover { /* Cập nhật selector */
            background-color: #f0f0f0;
            color: #000;
        }

    .event-filter-nav { /* Đổi tên từ event-filter-tabs */
        display: flex;
        gap: 20px;
        margin: 0 auto 20px auto;
        border: 1px solid #ccc;
        border-radius: 999px;
        padding: 10px 15px;
        max-width: 1140px;
        background-color: #f9f9f9;
        justify-content: center;
        box-shadow: 0 4px 8px rgba(0,0,0,0.05);
    }

    .event-filter-input { /* Đổi tên từ filter-box */
        position: relative;
        width: 100%;
    }

        .event-filter-input input, /* Cập nhật selector */
        .event-filter-input select { /* Cập nhật selector */
            width: 100%;
            padding: 10px 38px 10px 16px;
            border: 1px solid #ddd;
            border-radius: 25px;
            background-color: white;
            font-size: 14px;
            -webkit-appearance: none;
            -moz-appearance: none;
            appearance: none;
        }

    .event-date-range { /* Đổi tên từ date-range-box */
        display: flex;
        align-items: center;
        gap: 8px;
    }

        .event-date-range input { /* Cập nhật selector */
            padding: 10px 16px;
            border: 1px solid #ddd;
            border-radius: 25px;
            background-color: white;
            font-size: 14px;
            flex: 1;
        }

        .event-date-range span { /* Cập nhật selector */
            color: #666;
            font-size: 14px;
        }

    .event-filter-apply { /* Đổi tên từ btn-filter */
        background-color: orangered;
        color: white;
        border: none;
        margin-right: 10px;
        padding: 8px 20px;
        border-radius: 25px;
        font-weight: 600;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .event-filter-reset { /* Đổi tên từ btn-reset */
        background-color: #f0f0f0;
        color: #666;
        border: none;
        padding: 8px 20px;
        border-radius: 25px;
        font-weight: 600;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .event-filter-apply:hover { /* Cập nhật selector */
        background-color: #6a00d6;
    }

    .event-filter-reset:hover { /* Cập nhật selector */
        background-color: #e0e0e0;
    }

    /* Định dạng phân trang */
    .event-pagination ul { /* Đổi tên từ block-27 */
        display: flex;
        justify-content: center;
        list-style: none;
        padding: 0;
        margin: 0;
    }

        .event-pagination ul li { /* Cập nhật selector */
            margin: 0 5px;
        }

            .event-pagination ul li a, /* Cập nhật selector */
            .event-pagination ul li span { /* Cập nhật selector */
                display: inline-block;
                padding: 8px 15px;
                border-radius: 25px;
                font-size: 14px;
                font-weight: 600;
                transition: all 0.3s ease;
            }

            .event-pagination ul li a { /* Cập nhật selector */
                background-color: #f0f0f0;
                color: #333;
            }

                .event-pagination ul li a:hover { /* Cập nhật selector */
                    background-color: orangered;
                    color: white;
                }

            .event-pagination ul li.active span { /* Cập nhật selector */
                background-color: orangered;
                color: white;
            }

            .event-pagination ul li span { /* Cập nhật selector */
                cursor: default;
            }
</style>