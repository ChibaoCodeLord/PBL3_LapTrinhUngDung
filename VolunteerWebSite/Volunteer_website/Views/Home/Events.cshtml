@using System.Security.Claims
@model List<Volunteer_website.ViewModels.EventModel>
@{
    ViewData["Title"] = "Events";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<head>
    <link rel="stylesheet" href="~/css/Cause.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
</head>

<div class="hero-wrap" style="background-image: url('@Url.Content("~/images/bg_1.jpg")');" data-stellar-background-ratio="0.5">
    <div class="overlay"></div>
    <div class="container">
        <div class="row no-gutters slider-text align-items-center justify-content-center" data-scrollax-parent="true">
            <div class="col-md-7 ftco-animate text-center" data-scrollax=" properties: { translateY: '70%' }">
                <p class="breadcrumbs" data-scrollax="properties: { translateY: '30%', opacity: 1.6 }">
                    <span class="mr-2"><a href="@Url.Action("Index", "Home")">Home </a></span>
                    <span>Event</span>
                </p>
                <h1 class="mb-3 bread" data-scrollax="properties: { translateY: '30%', opacity: 1.6 }">EVENT</h1>
            </div>
        </div>
    </div>
</div>

<section class="ftco-section pt-3">
    <div class="container">
        <div class="row">
            @{
                var today = DateOnly.FromDateTime(DateTime.Today);
            }
            <div class="event-filter-container container">
                <!-- Status Tabs Row -->
                <div class="event-filter-tabs d-flex gap-2 mb-3">
                    <button class="tab-btn active" data-filter="ongoing">Đang diễn ra</button>
                    <button class="tab-btn" data-filter="upcoming">Sắp diễn ra</button>
                    <button class="tab-btn" data-filter="ended">Đã kết thúc</button>
                </div>

                <!-- Tất cả các thanh lọc trên cùng một hàng -->
                <div class="row mb-3 align-items-center">
                    <!-- Loại sự kiện -->
                    <div class="col-md-3">
                        <div class="filter-box">
                            <select id="eventTypeFilter">
                                <option value="">Tất cả loại sự kiện</option>
                                @foreach (var type in Model.Select(e => e.type).Distinct())
                                {
                                    <option value="@type">@type</option>
                                }
                            </select>
                            <i class="fa fa-chevron-down search-icon"></i>
                        </div>
                    </div>

                    <!-- Khoảng thời gian -->
                    <div class="col-md-6">
                        <div class="date-range-box">
                            <input type="date" id="startDateFrom" placeholder="Từ ngày">
                            <span>đến</span>
                            <input type="date" id="startDateTo" placeholder="Đến ngày">
                        </div>
                    </div>

                    <!-- Nút lọc và đặt lại -->
                    <div class="col-md-3 text-right">
                        <button id="applyFilter" class="btn btn-filter">Lọc</button>
                        <button id="resetFilter" class="btn btn-reset">Đặt lại</button>
                    </div>
                </div>

                <!-- Hàng tìm kiếm theo tên sự kiện và ban tổ chức -->
                <div class="row mb-3">
                    <!-- Tìm kiếm sự kiện -->
                    <div class="col-md-6">
                        <div class="filter-box">
                            <input type="text" id="eventNameSearch" placeholder="Tìm kiếm sự kiện...">
                            <i class="fa fa-search search-icon"></i>
                        </div>
                    </div>

                    <!-- Tìm kiếm ban tổ chức -->
                    <div class="col-md-6">
                        <div class="filter-box">
                            <input type="text" id="organizationSearch" placeholder="Tìm ban tổ chức...">
                            <i class="fa fa-search search-icon"></i>
                        </div>
                    </div>
                </div>
            </div>
            @foreach (var ev in Model)
            {
                var daysLeft = (ev.DateEnd.DayNumber - today.DayNumber);
                var percentFund = ev.targetfund > 0 ? (int)((double)ev.currentfund / ev.targetfund * 100) : 0;

                // Xác định trạng thái sự kiện
                var eventStatus = "";
                if (today >= ev.DateBegin && today <= ev.DateEnd)
                {
                    eventStatus = "ongoing";
                }
                else if (today < ev.DateBegin)
                {
                    eventStatus = "upcoming";
                }
                else
                {
                    eventStatus = "ended";
                }

                <div class="col-md-4 ftco-animate mb-4 event-card"
                     data-status="@eventStatus"
                     data-date-begin="@ev.DateBegin.ToString("yyyy-MM-dd")"
                     data-date-end="@ev.DateEnd.ToString("yyyy-MM-dd")"
                     data-event-type="@ev.type">
                    <div class="card">
                        <img src="@Url.Content(ev.ImagePath)" alt="@ev.Name" />
                        <div class="card-content">
                            <span class="card-title">@ev.Name</span>
                            <div class="org-info">
                                <span>@ev.Organization</span>
                                <span style="background: #ffcc99; padding: 5px 10px; border-radius: 5px;">
                                    @(daysLeft > 0 ? $"{daysLeft} Days Left" : "Closed")
                                </span>
                            </div>
                            <div class="progress-container">
                                <div class="progress-bar" style="width: @(percentFund)%"></div>
                            </div>
                            <span class="fund-raised">
                                @ev.currentfund.ToString("N0") / @ev.targetfund.ToString("N0")
                            </span>
                            <span class="donation-group">
                                <span class="donation-count">
                                    <div>Members</div>
                                    <span class="count">
                                        @ev.currentmember.ToString("N0") / @ev.targetmember.ToString("N0")
                                    </span>
                                </span>
                                <a href="@Url.Action("Detail_Event", "Home", new { id = ev.Event_Id })" class="donate-btn">View</a>
                            </span>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Phân trang -->
        <div class="row mt-5">
            <div class="col text-center">
                <div class="block-27">
                    <ul id="pagination">
                        <!-- Pagination items will be dynamically generated here -->
                    </ul>
                </div>
            </div>
        </div>
    </div>
</section>

<script>
document.addEventListener('DOMContentLoaded', function () {
    const tabButtons = document.querySelectorAll('.tab-btn');
    const eventCards = document.querySelectorAll('.event-card');
    const searchInputs = {
        eventName: document.getElementById('eventNameSearch'),
        organization: document.getElementById('organizationSearch'),
        startDateFrom: document.getElementById('startDateFrom'),
        startDateTo: document.getElementById('startDateTo'),
        eventType: document.getElementById('eventTypeFilter')
    };
    const applyFilterBtn = document.getElementById('applyFilter');
    const resetFilterBtn = document.getElementById('resetFilter');
    const paginationContainer = document.getElementById('pagination');
    let currentFilter = "ongoing";
    let currentPage = 1;
    const itemsPerPage = 6; // Adjust this number based on how many events per page

    function applyAllFilters(page = 1) {
        const query = {
            eventName: searchInputs.eventName.value.toLowerCase(),
            organization: searchInputs.organization.value.toLowerCase(),
            startDateFrom: searchInputs.startDateFrom.value ? new Date(searchInputs.startDateFrom.value) : null,
            startDateTo: searchInputs.startDateTo.value ? new Date(searchInputs.startDateTo.value) : null,
            eventType: searchInputs.eventType.value
        };

        // Collect all matching cards
        const matchingCards = Array.from(eventCards).filter(card => {
            const status = card.getAttribute('data-status');
            const title = card.querySelector('.card-title').textContent.toLowerCase();
            const org = card.querySelector('.org-info span:first-child').textContent.toLowerCase();
            const dateBegin = new Date(card.getAttribute('data-date-begin'));
            const dateEndAttr = card.getAttribute('data-date-end');
            const dateEnd = dateEndAttr ? new Date(dateEndAttr) : null;
            const eventType = card.getAttribute('data-event-type');

            // Status filter
            const matchesStatus = (status === currentFilter);

            // Text filters
            const matchesName = title.includes(query.eventName);
            const matchesOrg = org.includes(query.organization);

            // Date range filter
            let matchesDate = true;
            if (query.startDateFrom && query.startDateTo) {
                matchesDate = (
                    (dateBegin >= query.startDateFrom && dateBegin <= query.startDateTo) ||
                    (dateEnd && dateEnd >= query.startDateFrom && dateEnd <= query.startDateTo)
                );
            } else if (query.startDateFrom) {
                matchesDate = dateBegin >= query.startDateFrom || (dateEnd && dateEnd >= query.startDateFrom);
            } else if (query.startDateTo) {
                matchesDate = dateBegin <= query.startDateTo || (dateEnd && dateEnd <= query.startDateTo);
            }

            // Event type filter
            let matchesType = true;
            if (query.eventType) {
                matchesType = eventType === query.eventType;
            }

            return matchesStatus && matchesName && matchesOrg && matchesDate && matchesType;
        });

        // Calculate pagination
        const totalItems = matchingCards.length;
        const totalPages = Math.ceil(totalItems / itemsPerPage);
        currentPage = Math.min(page, Math.max(1, totalPages));

        // Show/hide cards based on current page
        eventCards.forEach(card => card.style.display = 'none');
        const startIndex = (currentPage - 1) * itemsPerPage;
        const endIndex = startIndex + itemsPerPage;
        matchingCards.slice(startIndex, endIndex).forEach(card => {
            card.style.display = 'block';
        });

        // Update pagination UI
        updatePagination(totalPages);
    }

    function updatePagination(totalPages) {
        paginationContainer.innerHTML = '';

        // Previous button
        const prevLi = document.createElement('li');
        prevLi.innerHTML = '<a href="#"><</a>';
        prevLi.classList.add('pagination-btn');
        if (currentPage === 1) {
            prevLi.classList.add('disabled');
        } else {
            prevLi.addEventListener('click', (e) => {
                e.preventDefault();
                if (currentPage > 1) {
                    currentPage--;
                    applyAllFilters(currentPage);
                }
            });
        }
        paginationContainer.appendChild(prevLi);

        // Page numbers
        for (let i = 1; i <= totalPages; i++) {
            const li = document.createElement('li');
            li.innerHTML = `<span>${i}</span>`;
            li.classList.add('pagination-btn');
            if (i === currentPage) {
                li.classList.add('active');
            } else {
                li.addEventListener('click', (e) => {
                    e.preventDefault();
                    currentPage = i;
                    applyAllFilters(currentPage);
                });
            }
            paginationContainer.appendChild(li);
        }

        // Next button
        const nextLi = document.createElement('li');
        nextLi.innerHTML = '<a href="#">></a>';
        nextLi.classList.add('pagination-btn');
        if (currentPage === totalPages || totalPages === 0) {
            nextLi.classList.add('disabled');
        } else {
            nextLi.addEventListener('click', (e) => {
                e.preventDefault();
                if (currentPage < totalPages) {
                    currentPage++;
                    applyAllFilters(currentPage);
                }
            });
        }
        paginationContainer.appendChild(nextLi);
    }

    // Tab buttons functionality
    tabButtons.forEach(button => {
        button.addEventListener('click', function () {
            tabButtons.forEach(btn => btn.classList.remove('active'));
            this.classList.add('active');
            currentFilter = this.getAttribute('data-filter');
            currentPage = 1; // Reset to first page when changing filters
            applyAllFilters();
        });
    });

    // Apply filter button
    if (applyFilterBtn) {
        applyFilterBtn.addEventListener('click', () => {
            currentPage = 1; // Reset to first page when applying filters
            applyAllFilters();
        });
    }

    // Reset filter button
    if (resetFilterBtn) {
        resetFilterBtn.addEventListener('click', function () {
            // Clear all inputs
            searchInputs.eventName.value = '';
            searchInputs.organization.value = '';
            searchInputs.startDateFrom.value = '';
            searchInputs.startDateTo.value = '';
            searchInputs.eventType.value = '';
            currentPage = 1; // Reset to first page
            // Reset to default tab
            document.querySelector('.tab-btn[data-filter="ongoing"]').click();
        });
    }

    // Initialize with ongoing events
    document.querySelector('.tab-btn[data-filter="ongoing"]').click();
});
</script>

<style>
    .search-box {
        position: relative;
        width: 20%; /* 1/5 chiều rộng container */
        min-width: 200px;
    }

    .search-box input {
        width: 100%;
        padding: 10px 38px 10px 16px;
        border: none;
        border-radius: 25px;
        background-color: white;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.15);
        font-size: 14px;
    }

    .search-icon {
        position: absolute;
        top: 50%;
        right: 12px;
        transform: translateY(-50%);
        color: #333;
        font-size: 16px;
        pointer-events: none;
    }

    .tab-btn {
        background: none;
        border: none;
        font-weight: 600;
        font-size: 16px;
        color: #666;
        padding: 8px 12px;
        border-bottom: 3px solid transparent;
        border-radius: 999px; /* Bo tròn hoàn toàn */
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .tab-btn.active {
        color: orangered;
        border-color: #8000ff;
        background-color: #eee;
    }

    .tab-btn:hover {
        background-color: #f0f0f0;
        color: #000;
    }

    .event-filter-tabs {
        display: flex;
        gap: 20px;
        margin: 0 auto 20px auto;
        border: 1px solid #ccc;
        border-radius: 999px; /* Bo tròn khung */
        padding: 10px 15px;
        max-width: 1140px;
        background-color: #f9f9f9;
        justify-content: center;
        box-shadow: 0 4px 8px rgba(0,0,0,0.05); /* thêm nhẹ shadow nếu thích */
    }

    /* Loc */
    .filter-box {
        position: relative;
        width: 100%;
    }

    .filter-box input,
    .filter-box select {
        width: 100%;
        padding: 10px 38px 10px 16px;
        border: 1px solid #ddd;
        border-radius: 25px;
        background-color: white;
        font-size: 14px;
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
    }

    .date-range-box {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .date-range-box input {
        padding: 10px 16px;
        border: 1px solid #ddd;
        border-radius: 25px;
        background-color: white;
        font-size: 14px;
        flex: 1;
    }

    .date-range-box span {
        color: #666;
        font-size: 14px;
    }

    .btn-filter {
        background-color: orangered;
        color: white;
        border: none;
        padding: 8px 20px;
        border-radius: 25px;
        font-weight: 600;
        cursor: pointer;
        transition: background-color 0.3s;
        margin-right: 10px;
    }

    .btn-reset {
        background-color: #f0f0f0;
        color: #666;
        border: none;
        padding: 8px 20px;
        border-radius: 25px;
        font-weight: 600;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .btn-filter:hover {
        background-color: #6a00d6;
    }

    .btn-reset:hover {
        background-color: #e0e0e0;
    }

    /* Pagination Styles */
    .block-27 ul {
        display: flex;
        justify-content: center;
        align-items: center;
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .block-27 ul li {
        margin: 0 5px;
    }

    .block-27 ul li.pagination-btn {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: #f5f5f5;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .block-27 ul li.pagination-btn a,
    .block-27 ul li.pagination-btn span {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 100%;
        height: 100%;
        color: #333;
        text-decoration: none;
        font-weight: 600;
    }

    .block-27 ul li.pagination-btn.active {
        background-color: #ffaa66; /* Light orange for active page */
        color: white;
    }

    .block-27 ul li.pagination-btn:hover:not(.disabled) {
        background-color: #e0e0e0;
    }

    .block-27 ul li.pagination-btn.disabled {
        background-color: #f5f5f5;
        color: #ccc;
        cursor: not-allowed;
    }
</style>